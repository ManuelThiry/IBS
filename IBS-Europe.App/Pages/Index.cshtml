@page
@using IBS_Europe.App.Resources
@model IndexModel
@{
    ViewData["Title"] = SharedResource.I_Title;
}

<div class="index-hero text-white d-flex justify-content-center align-items-center text-center p-4" id="slideshow" style="height: 85vh;">
    <div class="index-hero-background" id="hero-background"></div> <!-- Élément séparé pour l'arrière-plan -->
    <div class="index-hero-text">
        <fieldset class="border-white p-3 rounded-4 bg-transparent-dark mt-5">
            <h1 class="fs-3em m-0">@SharedResource.I_Welcome</h1>
            <p class="fs-3">@SharedResource.I_Trusted</p>
        </fieldset>
        <div class="p-2 gap-2 w-100 d-flex justify-content-center mt-5">
            <button class="button-1" onclick="document.getElementById('why-ibs').scrollIntoView({ behavior: 'smooth' });">@SharedResource.I_WhyIBS</button>
            <a asp-page="/AboutUsHome">
            <button class="button-1">@SharedResource.I_Learn</button>
            </a>
        </div>
    </div>
</div>


<section id="why-ibs" class="text-center p-4">
    <h2>@SharedResource.I_WhyIBS</h2>
    <div class="d-flex align-items-center justify-content-center m-auto max-w-50em">
        <div class="bg-white rounded-3 text-start p-4 shadow index-bubble">
            @Html.Raw(SharedResource.I_WhyText)
        </div>
    </div>
</section>


<script>
   const images = @Html.Raw(Json.Serialize(Model.Images));
   const heroElement = document.getElementById('slideshow');
   const heroBackground = document.getElementById('hero-background');
   let currentIndex = 0;
   let isFirstImage = true; // Variable pour vérifier si c'est la première image
   
   function changeBackground() {
       if (isFirstImage) {
           // Afficher immédiatement la première image sans animation
           const correctedPath = images[currentIndex].replace(/\\/g, '/');
           heroBackground.style.backgroundImage = `url('/${correctedPath}')`;
           isFirstImage = false; // La première image est maintenant changée
       } else {
           // Réduire l'opacité de l'arrière-plan pour l'animation de fondu
           heroBackground.style.opacity = 0;
   
           // Attendre que le fondu soit terminé (1 seconde)
           setTimeout(() => {
               // Remplacer les backslashes par des slashes pour le chemin des images
               const correctedPath = images[currentIndex].replace(/\\/g, '/');
               heroBackground.style.backgroundImage = `url('/${correctedPath}')`;
   
               // Après avoir changé l'image, rétablir l'opacité à 1 pour l'effet de réapparition
               heroBackground.style.transition = 'opacity 1s ease-in-out';
               heroBackground.style.opacity = 1;
           }, 1000); // Temps d'attente correspondant à la durée de l'animation de fondu
       }
   
       // Mettre à jour l'index de l'image
       currentIndex = (currentIndex + 1) % images.length; // Boucle sur les images
   }
   
   // Change l'image toutes les 10 secondes
   setInterval(changeBackground, 10000);
   
   // Initialise la première image
   changeBackground();



</script>